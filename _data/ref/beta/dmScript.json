{
    "elements": [
        {
            "brief": "Get current gameobject's collection handle",
            "description": "Get current gameobject's collection handle",
            "error": "",
            "examples": "",
            "members": [],
            "name": "CheckCollection",
            "notes": [
                "Works from both a .script/.gui_script"
            ],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "lua-arg",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "gameobject instance",
                    "name": "instance",
                    "types": [
                        "lua_State*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get current game object instance\nWorks in both gam...",
            "description": "Get current game object instance\nWorks in both gameobjects and gui scripts",
            "error": "",
            "examples": "",
            "members": [],
            "name": "CheckGOInstance",
            "notes": [],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get gameobject instance\nThe instance reference (u...",
            "description": "Get gameobject instance\nThe instance reference (url) at stack index \"index\" will be resolved to an instance.",
            "error": "",
            "examples": "How to get the position of a gameobject in a script extension\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">get_position</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">HInstance</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">CheckGOInstance</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Point3</span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">GetPosition</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"p\">.</span><span class=\"n\">getX</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"p\">.</span><span class=\"n\">getY</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"p\">.</span><span class=\"n\">getZ</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "members": [],
            "name": "CheckGOInstance",
            "notes": [
                "The function only accepts instances in \"this\" collection. Otherwise a lua-error will be raised."
            ],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "lua-arg",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "gameobject instance",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Serialize a table to a buffer\nSupported types: LUA...",
            "description": "Serialize a table to a buffer\nSupported types: LUA_TBOOLEAN, LUA_TNUMBER, LUA_TSTRING, Point3, Vector3, Vector4 and Quat\nKeys must be strings",
            "error": "",
            "examples": "",
            "members": [],
            "name": "CheckTable",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Buffer that will be written to (must be DM_ALIGNED(16))",
                    "name": "buffer",
                    "types": [
                        "char*"
                    ]
                },
                {
                    "doc": "Buffer size",
                    "name": "buffer_size",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "Index of the table",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Number of bytes used in buffer",
                    "name": "result",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "helper macro to validate the Lua stack state and throw a lua error.",
            "description": "This macro will verify that the Lua stack size hasn't been changed before\nthrowing a Lua error, which will long-jump out of the current function.\nThis macro can only be used together with <a href=\"#DM_LUA_STACK_CHECK\">DM_LUA_STACK_CHECK</a> and should\nbe prefered over manual checking of the stack.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">ModuleFunc</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">some_error_check</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">DM_LUA_ERROR</span><span class=\"p\">(</span><span class=\"s\">&quot;some error message&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "members": [],
            "name": "DM_LUA_ERROR",
            "notes": [],
            "parameters": [
                {
                    "doc": "Format string that contains error information.",
                    "name": "fmt",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "Format string args (variable arg list)",
                    "name": "args",
                    "types": [
                        "..."
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "helper macro to validate the Lua stack state before leaving a function.",
            "description": "Diff is the expected difference of the stack size.\nIf luaL_error, or another function that executes a long-jump, is part of the executed code,\nthe stack guard cannot be guaranteed to execute at the end of the function.\nIn that case you should manually check the stack using <code>lua_gettop</code>.\nIn the case of luaL_error, see <a href=\"#DM_LUA_ERROR\">DM_LUA_ERROR</a>.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "members": [],
            "name": "DM_LUA_STACK_CHECK",
            "notes": [],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Number of expected items to be on the Lua stack once this struct goes out of scope",
                    "name": "diff",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "retrieve a LuaHBuffer from the supplied lua state",
            "description": "Retrieve a LuaHBuffer from the supplied lua state.\nCheck if the value in the supplied index on the lua stack is a LuaHBuffer and returns it.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::CheckBuffer",
            "notes": [
                "The dmBuffer::IsBufferValid is already called on the returned buffer"
            ],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "pointer to dmScript::LuaHBuffer",
                    "name": "buffer",
                    "types": [
                        "LuaHBuffer*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "retrieve a LuaHBuffer from the supplied lua state.",
            "description": "Retrieve a LuaHBuffer from the supplied lua state.\nCheck if the value in the supplied index on the lua stack is a LuaHBuffer and returns it.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::CheckBufferNoError",
            "notes": [
                "Returns 0 on error. Does not invoke lua_error.",
                "The dmBuffer::IsBufferValid is already called on the returned buffer"
            ],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "pointer to dmScript::LuaHBuffer or 0 if not valid",
                    "name": "buffer",
                    "types": [
                        "LuaHBuffer*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "retrieve a HBuffer from the supplied lua state",
            "description": "Retrieve a HBuffer from the supplied lua state\nCheck if the value in the supplied index on the lua stack is a LuaHBuffer and it's valid, returns the HBuffer.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::CheckBufferUnpack",
            "notes": [
                "The dmBuffer::IsBufferValid is already called on the returned buffer"
            ],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "buffer if valid, 0 otherwise",
                    "name": "buffer",
                    "types": [
                        "dmBuffer::HBuffer"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "retrieve a HBuffer from the supplied lua state",
            "description": "Retrieve a HBuffer from the supplied lua state\nCheck if the value in the supplied index on the lua stack is a LuaHBuffer and it's valid, returns the HBuffer.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::CheckBufferUnpackNoError",
            "notes": [
                "The dmBuffer::IsBufferValid is already called on the returned buffer"
            ],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "buffer if valid, 0 otherwise",
                    "name": "buffer",
                    "types": [
                        "dmBuffer::HBuffer"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get hash value",
            "description": "Check if the value in the supplied index on the lua stack is a hash.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::CheckHash",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "hash value",
                    "name": "The",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get hash from hash or string",
            "description": "Check if the value in the supplied index on the lua stack is a hash or string.\nIf it is a string, it gets hashed on the fly",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::CheckHashOrString",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "hash value",
                    "name": "The",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "check if the value is a dmVMath::Matrix4",
            "description": "Check if the value in the supplied index on the lua stack is a dmVMath::Matrix4.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::CheckMatrix4",
            "notes": [
                "throws a luaL_error if it's not the correct type"
            ],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The pointer to the value",
                    "name": "matrix",
                    "types": [
                        "dmVMath::Matrix4*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "check if the value is a dmVMath::Vector3",
            "description": "Check if the value in the supplied index on the lua stack is a dmVMath::Quat.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::CheckQuat",
            "notes": [
                "throws a luaL_error if it's not the correct type"
            ],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The pointer to the value",
                    "name": "quat",
                    "types": [
                        "dmVMath::Quat*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "check if the value is a dmVMath::Vector3",
            "description": "Check if the value in the supplied index on the lua stack is a dmVMath::Vector3.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::CheckVector3",
            "notes": [
                "throws a luaL_error if it's not the correct type"
            ],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The pointer to the value",
                    "name": "vector3",
                    "types": [
                        "dmVMath::Vector3*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "check if the value is a dmVMath::Vector3",
            "description": "Check if the value in the supplied index on the lua stack is a dmVMath::Vector3.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::CheckVector4",
            "notes": [
                "throws a luaL_error if it's not the correct type"
            ],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The pointer to the value",
                    "name": "vector4",
                    "types": [
                        "dmVMath::Vector4*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Register a Lua callback.",
            "description": "Stores the current Lua state plus references to the script instance (self) and the callback.\nExpects SetInstance() to have been called prior to using this method.\nThe allocated data is created on the Lua stack and references are made against the\ninstances own context table.\nIf the callback is not explicitly deleted with DestroyCallback() the references and\ndata will stay around until the script instance is deleted.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">SomeFunction</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// called from Lua</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">LuaCallbackInfo</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">cbk</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">CreateCallback</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">later</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">InvokeCallback</span><span class=\"p\">(</span><span class=\"n\">LuaCallbackInfo</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">cbk</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lua_State</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">GetCallbackLuaContext</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">SetupCallback</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;hello&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">PCall</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// self + # user arguments</span>\n\n<span class=\"w\">    </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">TeardownCallback</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">DestroyCallback</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// only do this if you&#39;re not using the callback again</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "members": [],
            "name": "dmScript::CreateCallback",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        ""
                    ]
                },
                {
                    "doc": "Lua stack index of the function",
                    "name": "index",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "callback struct if successful, 0 otherwise",
                    "name": "Lua",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Deletes the Lua callback",
            "description": "Deletes the Lua callback",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::DestroyCallback",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua callback struct",
                    "name": "cbk",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gets the Lua context from a callback struct",
            "description": "Gets the Lua context from a callback struct",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::GetCallbackLuaContext",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua callback struct",
                    "name": "cbk",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Retrieve current script instance from the global t...",
            "description": "Retrieve current script instance from the global table and place it on the top of the stack, only valid when set.\n(see <a href=\"#dmScript::GetMainThread\">dmScript::GetMainThread</a>)",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::GetInstance",
            "notes": [],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Retrieve the main thread lua state from any lua st...",
            "description": "Retrieve the main thread lua state from any lua state (main thread or coroutine).",
            "error": "",
            "examples": "How to create a Lua callback\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">LuaCallbackInfo</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">g_MyCallbackInfo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">InvokeCallback</span><span class=\"p\">(</span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">LuaCallbackInfo</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">cbk</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">IsCallbackValid</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">lua_State</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">GetCallbackLuaContext</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">SetupCallback</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dmLogError</span><span class=\"p\">(</span><span class=\"s\">&quot;Failed to setup callback&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;Hello from extension!&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">76</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">PCall</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// instance + 2</span>\n\n<span class=\"w\">    </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">TeardownCallback</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">Start</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">g_MyCallbackInfo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">CreateCallback</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">Update</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"o\">++</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">InvokeCallback</span><span class=\"p\">(</span><span class=\"n\">g_MyCallbackInfo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">g_MyCallbackInfo</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">DestroyCallback</span><span class=\"p\">(</span><span class=\"n\">g_MyCallbackInfo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">g_MyCallbackInfo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "members": [],
            "name": "dmScript::GetMainThread",
            "notes": [],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the main thread lua state",
                    "name": "lua_State",
                    "types": [
                        "lua_State*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "check if the value is a dmScript::LuaHBuffer",
            "description": "Check if the value is a dmScript::LuaHBuffer",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::IsBuffer",
            "notes": [],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "True if value at index is a LuaHBuffer",
                    "name": "boolean",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Check if Lua callback is valid.",
            "description": "Check if Lua callback is valid.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::IsCallbackValid",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua callback struct",
                    "name": "cbk",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Check if the value at #index is a hash",
            "description": "Check if the value at #index is a hash",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::IsHash",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "if the value at #index is a hash",
                    "name": "true",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Check if the script instance in the lua state is v...",
            "description": "Check if the script instance in the lua state is valid. The instance is assumed to have been previously set by <a href=\"#dmScript::SetInstance\">dmScript::SetInstance</a>.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::IsInstanceValid",
            "notes": [],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Returns true if the instance is valid",
                    "name": "boolean",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Check if the value at #index is a dmVMath::Matrix4...",
            "description": "Check if the value at #index is a dmVMath::Matrix4*",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::IsMatrix4",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        ""
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "if value at #index is a dmVMath::Matrix4*",
                    "name": "true",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Check if the value at #index is a dmVMath::Quat*",
            "description": "Check if the value at #index is a dmVMath::Quat*",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::IsQuat",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        ""
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "if value at #index is a dmVMath::Quat*",
                    "name": "true",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Check if the value at #index is a dmVMath::Vector3...",
            "description": "Check if the value at #index is a dmVMath::Vector3*",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::IsVector3",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        ""
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "if value at #index is a dmVMath::Vector3*",
                    "name": "true",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Check if the value at #index is a dmVMath::Vector4...",
            "description": "Check if the value at #index is a dmVMath::Vector4*",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::IsVector4",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        ""
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "if value at #index is a dmVMath::Vector4*",
                    "name": "true",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "convert a Json string to a Lua table",
            "description": "Convert a Json string to Lua table.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::JsonToLua",
            "notes": [
                "Throws Lua error if it fails to parser the json"
            ],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "json string",
                    "name": "json",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "length of json string",
                    "name": "json_len",
                    "types": [
                        "size_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "1 if it succeeds. Throws a Lua error if it fails",
                    "name": "int",
                    "types": [
                        "int"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "callback info struct",
            "description": "callback info struct that will hold the relevant info needed to make a callback into Lua",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::LuaCallbackInfo",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Lua wrapper for a dmBuffer::HBuffer",
            "description": "Holds info about the buffer and who owns it.",
            "error": "",
            "examples": "See examples for dmScript::PushBuffer()",
            "members": [
                {
                    "doc": "of\n    - m_BufferRes <span class=\"type\">void*</span>                       A buffer resource\n    - m_Buffer    <span class=\"type\">dmBuffer::HBuffer</span>           A buffer",
                    "name": "Union",
                    "type": ""
                },
                {
                    "doc": "The buffer (or resource)",
                    "name": "m_Buffer",
                    "type": "dmBuffer::HBuffer"
                },
                {
                    "doc": "What ownership the pointer has",
                    "name": "m_Owner",
                    "type": "dmScript::LuaBufferOwnership"
                }
            ],
            "name": "dmScript::LuaHBuffer",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "convert a Lua table to a Json string",
            "description": "Convert a Lua table to a Json string",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::LuaToJson",
            "notes": [],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "[out] Pointer to char*, which will receive a newly allocated string. Use free().",
                    "name": "json",
                    "types": [
                        "char**"
                    ]
                },
                {
                    "doc": "length of json string",
                    "name": "json_len",
                    "types": [
                        "size_t*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "&lt;0 if it fails. &gt;=0 if it succeeds.",
                    "name": "int",
                    "types": [
                        "int"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "This function wraps lua_pcall with the addition of...",
            "description": "This function wraps lua_pcall with the addition of specifying an error handler which produces a backtrace.\nIn the case of an error, the error is logged and popped from the stack.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::PCall",
            "notes": [],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        ""
                    ]
                },
                {
                    "doc": "number of arguments",
                    "name": "nargs",
                    "types": [
                        ""
                    ]
                },
                {
                    "doc": "number of results",
                    "name": "nresult",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "code from pcall",
                    "name": "error",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "push a LuaHBuffer onto the supplied lua state",
            "description": "Will increase the stack by 1.",
            "error": "",
            "examples": "How to push a buffer and give Lua ownership of the buffer (GC)\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">LuaHBuffer</span><span class=\"w\"> </span><span class=\"nf\">luabuf</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">OWNER_LUA</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">PushBuffer</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">luabuf</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\nHow to push a buffer and keep ownership in C++\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">LuaHBuffer</span><span class=\"w\"> </span><span class=\"nf\">luabuf</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">OWNER_C</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">PushBuffer</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">luabuf</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "members": [],
            "name": "dmScript::PushBuffer",
            "notes": [],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "buffer to push",
                    "name": "buffer",
                    "types": [
                        "dmScript::LuaHBuffer"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Push a hash value onto the supplied lua state, wil...",
            "description": "Push a hash value onto the supplied lua state, will increase the stack by 1.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::PushHash",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "<span class=\"tyoe\"> dmhash_t</span> Hash value to push",
                    "name": "hash",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "push a dmVMath::Matrix4 onto the Lua stack",
            "description": "Push a matrix4 value onto the Lua stack. Will increase the stack by 1.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::PushMatrix4",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "dmVMath::Matrix4 value to push",
                    "name": "matrix",
                    "types": [
                        "dmVMath::Matrix4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "push a dmVMath::Quat onto the Lua stack",
            "description": "Push a quaternion value onto Lua stack. Will increase the stack by 1.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::PushQuat",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "dmVMath::Quat value to push",
                    "name": "quat",
                    "types": [
                        "dmVMath::Quat"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "push a dmVMath::Vector3 onto the Lua stack",
            "description": "Push a dmVMath::Vector3 value onto the supplied lua state, will increase the stack by 1.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::PushVector3",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Vector3 value to push",
                    "name": "v",
                    "types": [
                        "dmVMath::Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "push a dmVMath::Vector4 on the stack",
            "description": "Push a dmVMath::Vector4 value onto the supplied lua state, will increase the stack by 1.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::PushVector4",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "dmVMath::Vector4 value to push",
                    "name": "v",
                    "types": [
                        "dmVMath::Vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "wrapper for luaL_ref.",
            "description": "Creates and returns a reference, in the table at index t, for the object at the\ntop of the stack (and pops the object).\nIt also tracks number of global references kept.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::Ref",
            "notes": [],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "table the lua table that stores the references. E.g LUA_REGISTRYINDEX",
                    "name": "table",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the new reference",
                    "name": "reference",
                    "types": [
                        "int"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Sets the current script instance\nSet the value on ...",
            "description": "Sets the current script instance\nSet the value on the top of the stack as the instance into the global table and pops it from the stack.\n(see <a href=\"#dmScript::GetMainThread\">dmScript::GetMainThread</a>)",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::SetInstance",
            "notes": [],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Setups up the Lua callback prior to a call to dmScript::PCall()",
            "description": "The Lua stack after a successful call:\n<div class=\"codehilite\"><pre><span></span><code>   [-4] old instance\n   [-3] context table\n   [-2] callback\n   [-1] self\n</code></pre></div>\n\nIn the event of an unsuccessful call, the Lua stack is unchanged",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::SetupCallback",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua callback struct",
                    "name": "cbk",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "if the setup was successful",
                    "name": "true",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Cleans up the stack after SetupCallback+PCall calls",
            "description": "Sets the previous instance\nExpects Lua stack:\n<div class=\"codehilite\"><pre><span></span><code>   [-2] old instance\n   [-1] context table\n</code></pre></div>\n\nBoth values are removed from the stack",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::TeardownCallback",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua callback struct",
                    "name": "cbk",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get the value at index as a dmVMath::Matrix4*",
            "description": "Get the value at index as a dmVMath::Matrix4*",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::ToMatrix4",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The pointer to the value, or 0 if not correct type",
                    "name": "quat",
                    "types": [
                        "dmVMath::Matrix4*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get the value at index as a dmVMath::Quat*",
            "description": "Get the value at index as a dmVMath::Quat*",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::ToQuat",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The pointer to the value, or 0 if not correct type",
                    "name": "quat",
                    "types": [
                        "dmVMath::Quat*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get the value at index as a dmVMath::Vector3*",
            "description": "Get the value at index as a dmVMath::Vector3*",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::ToVector3",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The pointer to the value, or 0 if not correct type",
                    "name": "v",
                    "types": [
                        "dmVMath::Vector3*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get the value at index as a dmVMath::Vector4*",
            "description": "Get the value at index as a dmVMath::Vector4*",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::ToVector4",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The pointer to the value, or 0 if not correct type",
                    "name": "v",
                    "types": [
                        "dmVMath::Vector4*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "wrapper for luaL_unref.",
            "description": "Releases reference ref from the table at index t (see luaL_ref).\nThe entry is removed from the table, so that the referred object can be collected.\nIt also decreases the number of global references kept",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmScript::Unref",
            "notes": [],
            "parameters": [
                {
                    "doc": "lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "table the lua table that stores the references. E.g LUA_REGISTRYINDEX",
                    "name": "table",
                    "types": [
                        "int"
                    ]
                },
                {
                    "doc": "the reference to the object",
                    "name": "reference",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get component user data from a url.",
            "description": "Get component user data from a url.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "GetComponentFromLua",
            "notes": [
                "The object referenced by the url must be in the same collection as the caller."
            ],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "index to argument (a url)",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                },
                {
                    "doc": "E.g. \"factoryc\". The call will fail if the found component does not have the specified extension",
                    "name": "component_type",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "The world associated owning the component. May be 0",
                    "name": "world",
                    "types": [
                        "void**"
                    ]
                },
                {
                    "doc": "The component data associated with the url. May be 0",
                    "name": "component",
                    "types": [
                        "void**"
                    ]
                },
                {
                    "doc": "The resolved url. May be 0",
                    "name": "url",
                    "types": [
                        "dmMessage::URL*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gets as good as possible printable string from a h...",
            "description": "Gets as good as possible printable string from a hash or string",
            "error": "",
            "examples": "",
            "members": [],
            "name": "GetStringFromHashOrString",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                },
                {
                    "doc": "buffer receiving the value",
                    "name": "buffer",
                    "types": [
                        "char*"
                    ]
                },
                {
                    "doc": "the buffer length",
                    "name": "buffer_length",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Returns buffer. If buffer is non null, it will always contain a null terminated string. \"<unknown>\" if the hash could not be looked up.",
                    "name": "string",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "The script context",
            "description": "The script context",
            "error": "",
            "examples": "",
            "members": [],
            "name": "HContext",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "buffer ownership",
            "description": "Buffer ownership.\n - OWNER_C   - m_Buffer is owned by C side, should not be destroyed when GCed\n - OWNER_LUA - m_Buffer is owned by Lua side, will be destroyed when GCed\n - OWNER_RES - m_Buffer not used, has a reference to a buffer resource instead. m_BufferRes is owned by C side, will be released when GCed",
            "error": "",
            "examples": "",
            "members": [
                {
                    "doc": "",
                    "name": "dmScript::OWNER_C",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmScript::OWNER_LUA",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmScript::OWNER_RES",
                    "type": ""
                }
            ],
            "name": "LuaBufferOwnership",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Creates a reference to the value at top of stack, ...",
            "description": "Creates a reference to the value at top of stack, the ref is done in the\ncurrent instances context table.\nExpects SetInstance() to have been set with an value that has a meta table\nwith META_GET_INSTANCE_CONTEXT_TABLE_REF method.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "RefInInstance",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "ref to value or LUA_NOREF\nLua stack on entry\n [-1] value\nLua stack on exit",
                    "name": "lua",
                    "types": [
                        "int"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Resolves a url in string format into a dmMessage::...",
            "description": "Resolves a url in string format into a dmMessage::URL struct.\nSpecial handling for:\n- \".\" returns the default socket + path\n- \"#\" returns default socket + path + fragment",
            "error": "",
            "examples": "",
            "members": [],
            "name": "RefInInstance",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "url",
                    "name": "url",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "where to store the result",
                    "name": "out_url",
                    "types": [
                        "dmMessage::URL*"
                    ]
                },
                {
                    "doc": "default url",
                    "name": "default_url",
                    "types": [
                        "dmMessage::URL*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "dmMessage::RESULT_OK if the conversion succeeded",
                    "name": "result",
                    "types": [
                        "dmMessage::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Deletes the instance local lua reference\nExpects ...",
            "description": "Deletes the instance local lua reference\nExpects SetInstance() to have been set with an value that has a meta table\nwith META_GET_INSTANCE_CONTEXT_TABLE_REF method.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "UnrefInInstance",
            "notes": [],
            "parameters": [
                {
                    "doc": "Lua state",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "ref to value or LUA_NOREF\nLua stack on entry\nLua stack on exit",
                    "name": "ref",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Converts a URL into a readable string. Useful for ...",
            "description": "Converts a URL into a readable string. Useful for e.g. error messages",
            "error": "",
            "examples": "",
            "members": [],
            "name": "UrlToString",
            "notes": [],
            "parameters": [
                {
                    "doc": "url",
                    "name": "url",
                    "types": [
                        "dmMessage::URL*"
                    ]
                },
                {
                    "doc": "the output buffer",
                    "name": "buffer",
                    "types": [
                        "char*"
                    ]
                },
                {
                    "doc": "the output buffer size",
                    "name": "buffer_size",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "returns the passed in buffer",
                    "name": "buffer",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "SDK Script API documentation",
        "description": "Built-in scripting functions.",
        "file": "dmsdk/script/script.h",
        "group": "DEFOLD SDK",
        "name": "Script",
        "namespace": "dmScript",
        "notes": [],
        "path": "engine/dlib/src/dmsdk/script/script.h"
    }
}