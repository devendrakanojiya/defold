{
    "elements": [
        {
            "brief": "amount of elapsed/CPU time used (depending on OS)",
            "description": "Returns an approximation of the amount in seconds of CPU time\nused by the program.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "os.clock",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "formats a date/time string",
            "description": "Returns a string or a table containing date and time,\nformatted according to the given string format.\nIf the time argument is present,\nthis is the time to be formatted\n(see the os.time function for a description of this value).\nOtherwise, date formats the current time.\nIf format starts with '!',\nthen the date is formatted in Coordinated Universal Time.\nAfter this optional character,\nif format is the string \"*t\",\nthen date returns a table with the following fields:\nyear (four digits), month (1--12), day (1--31),\nhour (0--23), min (0--59), sec (0--61),\nwday (weekday, Sunday is 1),\nyday (day of the year),\nand isdst (daylight saving flag, a boolean).\nIf format is not \"*t\",\nthen date returns the date as a string,\nformatted according to the same rules as the C function strftime.\nWhen called without arguments,\ndate returns a reasonable date and time representation that depends on\nthe host system and on the current locale\n(that is, <code>os.date()</code> is equivalent to <code>os.date(\"%c\")</code>).",
            "error": "",
            "examples": "",
            "members": [],
            "name": "os.date",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "name": "[format]",
                    "types": [
                        ""
                    ]
                },
                {
                    "doc": "",
                    "name": "[time]",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculates a time difference in seconds",
            "description": "Returns the number of seconds from time t1 to time t2.\nIn POSIX, Windows, and some other systems,\nthis value is exactly t2-t1.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "os.difftime",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "name": "t2",
                    "types": [
                        ""
                    ]
                },
                {
                    "doc": "",
                    "name": "t1",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "executes an operating system command",
            "description": "This function is equivalent to the C function system.\nIt passes command to be executed by an operating system shell.\nIt returns a status code, which is system-dependent.\nIf command is absent, then it returns nonzero if a shell is available\nand zero otherwise.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "os.execute",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "name": "[command]",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "attempts to terminate the process",
            "description": "Calls the C function exit,\nwith an optional code,\nto terminate the host program.\nThe default value for code is the success code.\nCalling os.exit will do a hard exit which will not run\nthe engine shutdown code. This may cause crashes on exit.\nThe recommended way to terminate your game is by using\nthe exit message which does a graceful shutdown.\n<code>msg.post(\"@system:\", \"exit\", {code = 0})</code>",
            "error": "",
            "examples": "",
            "members": [],
            "name": "os.exit",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "name": "[code]",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "returns an operating system environment variable",
            "description": "Returns the value of the process environment variable varname,\nor <span class=\"type\"> nil</span> if the variable is not defined.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "os.getenv",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "name": "varname",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "deletes a file",
            "description": "Deletes the file or directory with the given name.\nDirectories must be empty to be removed.\nIf this function fails, it returns <span class=\"type\"> nil</span>,\nplus a string describing the error.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "os.remove",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "name": "filename",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "renames a file",
            "description": "Renames file or directory named oldname to newname.\nIf this function fails, it returns <span class=\"type\"> nil</span>,\nplus a string describing the error.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "os.rename",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "name": "oldname",
                    "types": [
                        ""
                    ]
                },
                {
                    "doc": "",
                    "name": "newname",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the current locale to the supplied locale",
            "description": "Sets the current locale of the program.\nlocale is a string specifying a locale;\ncategory is an optional string describing which category to change:\n<code>\"all\"</code>, <code>\"collate\"</code>, <code>\"ctype\"</code>,\n<code>\"monetary\"</code>, <code>\"numeric\"</code>, or <code>\"time\"</code>;\nthe default category is <code>\"all\"</code>.\nThe function returns the name of the new locale,\nor <span class=\"type\"> nil</span> if the request cannot be honored.\nIf locale is the empty string,\nthe current locale is set to an implementation-defined native locale.\nIf locale is the string \"C\",\nthe current locale is set to the standard C locale.\nWhen called with <span class=\"type\"> nil</span> as the first argument,\nthis function only returns the name of the current locale\nfor the given category.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "os.setlocale",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "name": "locale",
                    "types": [
                        ""
                    ]
                },
                {
                    "doc": "",
                    "name": "[category]",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "returns the current time or calculates the time in seconds from a table",
            "description": "Returns the current time when called without arguments,\nor a time representing the date and time specified by the given table.\nThis table must have fields year, month, and day,\nand may have fields hour, min, sec, and isdst\n(for a description of these fields, see the os.date function).\nThe returned value is a number, whose meaning depends on your system.\nIn POSIX, Windows, and some other systems, this number counts the number\nof seconds since some given start time (the \"epoch\").\nIn other systems, the meaning is not specified,\nand the number returned by time can be used only as an argument to\ndate and difftime.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "os.time",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "name": "[table]",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "returns a name for a temporary file",
            "description": "Returns a string with a file name that can\nbe used for a temporary file.\nThe file must be explicitly opened before its use\nand explicitly removed when no longer needed.\nOn some systems (POSIX),\nthis function also creates a file with that name,\nto avoid security risks.\n(Someone else might create the file with wrong permissions\nin the time between getting the name and creating the file.)\nYou still have to open the file to use it\nand to remove it (even if you do not use it).\nWhen possible,\nyou may prefer to use io.tmpfile,\nwhich automatically removes the file when the program ends.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "os.tmpname",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Lua os standard library",
        "description": "Documentation for the Lua os standard library.\nFrom <a href=\"https://www.lua.org/manual/5.1/\">Lua 5.1 Reference Manual</a>\nby Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes.\nCopyright &copy; 2006-2012 Lua.org, PUC-Rio.\nFreely available under the terms of the <a href=\"https://www.lua.org/license.html\">Lua license</a>.",
        "file": "",
        "group": "LUA STANDARD LIBS",
        "name": "Os",
        "namespace": "os",
        "notes": [],
        "path": ""
    }
}