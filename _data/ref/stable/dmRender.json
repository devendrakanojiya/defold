{
    "elements": [
        {
            "brief": "Adds a render object to the current render frame",
            "description": "Adds a render object to the current render frame",
            "error": "",
            "examples": "",
            "members": [],
            "name": "AddToRender",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "name": "context",
                    "types": [
                        "dmRender::HRenderContext"
                    ]
                },
                {
                    "doc": "the render object",
                    "name": "ro",
                    "types": [
                        "dmRender::RenderObject*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result",
                    "name": "result",
                    "types": [
                        "dmRender::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Clears a named constant buffer from any constants.",
            "description": "Clears a named constant buffer from any constants.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "ClearNamedConstantBuffer",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants buffer",
                    "name": "buffer",
                    "types": [
                        "dmRender::HNamedConstantBuffer"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Deletes a shader program constant",
            "description": "Deletes a shader program constant",
            "error": "",
            "examples": "",
            "members": [],
            "name": "DeleteConstant",
            "notes": [],
            "parameters": [
                {
                    "doc": "The shader constant",
                    "name": "constant",
                    "types": [
                        "dmRender::HConstant"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Deletes a named constant buffer",
            "description": "Deletes a named constant buffer",
            "error": "",
            "examples": "",
            "members": [],
            "name": "DeleteNamedConstantBuffer",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants buffer",
                    "name": "buffer",
                    "types": [
                        "dmRender::HNamedConstantBuffer"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the vertex space (local or world)",
            "description": "Get the vertex space (local or world)",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmRender::GetMaterialVertexSpace",
            "notes": [],
            "parameters": [
                {
                    "doc": "the material",
                    "name": "material",
                    "types": [
                        "dmRender::HMaterial"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the vertex space",
                    "name": "vertex_space",
                    "types": [
                        "dmRenderDDF::MaterialDesc::VertexSpace"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "The maximum number of textures the render object c...",
            "description": "The maximum number of textures the render object can hold (currently 8)",
            "error": "",
            "examples": "",
            "members": [],
            "name": "dmRender::RenderObject::MAX_TEXTURE_COUNT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Frustum options used when setting up a draw call",
            "description": "Frustum options used when setting up a draw call",
            "error": "",
            "examples": "",
            "members": [
                {
                    "doc": "the frustum matrix",
                    "name": "m_FrustumMatrix",
                    "type": "matrix4"
                },
                {
                    "doc": "should the frustum culling use the near and far planes",
                    "name": "m_SkipNearFarPlanes",
                    "type": "bool"
                }
            ],
            "name": "FrustumOptions",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Frustum planes to use in a frustum",
            "description": "Frustum planes to use in a frustum",
            "error": "",
            "examples": "",
            "members": [
                {
                    "doc": "",
                    "name": "FRUSTUM_PLANES_SIDES",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "FRUSTUM_PLANES_ALL",
                    "type": ""
                }
            ],
            "name": "FrustumPlanes",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Gets the shader program constant location",
            "description": "Gets the shader program constant location",
            "error": "",
            "examples": "",
            "members": [],
            "name": "GetConstantLocation",
            "notes": [],
            "parameters": [
                {
                    "doc": "The shader constant",
                    "name": "constant",
                    "types": [
                        "dmRender::HConstant"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the location",
                    "name": "location",
                    "types": [
                        "int32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gets the shader program constant name",
            "description": "Gets the shader program constant name",
            "error": "",
            "examples": "",
            "members": [],
            "name": "GetConstantName",
            "notes": [],
            "parameters": [
                {
                    "doc": "The shader constant",
                    "name": "constant",
                    "types": [
                        "dmRender::HConstant"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the hash name",
                    "name": "name",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gets the shader program constant name",
            "description": "Gets the shader program constant name",
            "error": "",
            "examples": "",
            "members": [],
            "name": "GetConstantName",
            "notes": [],
            "parameters": [
                {
                    "doc": "The shader constant",
                    "name": "constant",
                    "types": [
                        "dmRender::HConstant"
                    ]
                },
                {
                    "doc": "the hash name",
                    "name": "name",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gets the type of the constant",
            "description": "Gets the type of the constant",
            "error": "",
            "examples": "",
            "members": [],
            "name": "GetConstantType",
            "notes": [],
            "parameters": [
                {
                    "doc": "The shader constant",
                    "name": "constant",
                    "types": [
                        "dmRender::HConstant"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the type of the constant",
                    "name": "type",
                    "types": [
                        "dmRenderDDF::MaterialDesc::ConstantType"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gets the shader program constant values",
            "description": "Gets the shader program constant values",
            "error": "",
            "examples": "",
            "members": [],
            "name": "GetConstantValues",
            "notes": [],
            "parameters": [
                {
                    "doc": "The shader constant",
                    "name": "constant",
                    "types": [
                        "dmRender::HConstant"
                    ]
                },
                {
                    "doc": "(out) the array num_values",
                    "name": "num_values",
                    "types": [
                        "uint32_t*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the uniform values",
                    "name": "values",
                    "types": [
                        "dmVMath::Vector4*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gets the key to the material tag list",
            "description": "Gets the key to the material tag list",
            "error": "",
            "examples": "",
            "members": [],
            "name": "GetMaterialTagListKey",
            "notes": [],
            "parameters": [
                {
                    "doc": "the material",
                    "name": "material",
                    "types": [
                        "dmGraphics::HMaterial"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the list key",
                    "name": "listkey",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gets a named constant from the buffer",
            "description": "Gets a named constant from the buffer",
            "error": "",
            "examples": "",
            "members": [],
            "name": "GetNamedConstant",
            "notes": [
                "This give access to the internal memory of the constant"
            ],
            "parameters": [
                {
                    "doc": "the constants buffer",
                    "name": "buffer",
                    "types": [
                        "dmRender::HNamedConstantBuffer"
                    ]
                },
                {
                    "doc": "the name of the constant",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "(out) the values. May not be null.",
                    "name": "values",
                    "types": [
                        "dmVMath::Vector4**"
                    ]
                },
                {
                    "doc": "(out) the number of values. May not be null.",
                    "name": "num_values",
                    "types": [
                        "uint32_t*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if constant existed.",
                    "name": "ok",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gets a named constant from the buffer - with type ...",
            "description": "Gets a named constant from the buffer - with type information",
            "error": "",
            "examples": "",
            "members": [],
            "name": "GetNamedConstant",
            "notes": [
                "This give access to the internal memory of the constant"
            ],
            "parameters": [
                {
                    "doc": "the constants buffer",
                    "name": "buffer",
                    "types": [
                        "dmRender::HNamedConstantBuffer"
                    ]
                },
                {
                    "doc": "the name of the constant",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "(out) the values. May not be null.",
                    "name": "values",
                    "types": [
                        "dmVMath::Vector4**"
                    ]
                },
                {
                    "doc": "(out) the number of values. May not be null.",
                    "name": "num_values",
                    "types": [
                        "uint32_t*"
                    ]
                },
                {
                    "doc": "(out) the constant type.",
                    "name": "constant_type",
                    "types": [
                        "dmRenderDDF::MaterialDesc::ConstantType*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if constant existed.",
                    "name": "ok",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gets number of constants in the buffer",
            "description": "Gets number of constants in the buffer",
            "error": "",
            "examples": "",
            "members": [],
            "name": "GetNamedConstantCount",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants buffer",
                    "name": "buffer",
                    "types": [
                        "dmRender::HNamedConstantBuffer"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if constant existed.",
                    "name": "ok",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Shader constant handle",
            "description": "Shader constant handle",
            "error": "",
            "examples": "",
            "members": [],
            "name": "HConstant",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Font map handle",
            "description": "Font map handle",
            "error": "",
            "examples": "",
            "members": [],
            "name": "HFontMap",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Material instance handle",
            "description": "Material instance handle",
            "error": "",
            "examples": "",
            "members": [],
            "name": "HMaterial",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Shader constant buffer handle. Holds name and valu...",
            "description": "Shader constant buffer handle. Holds name and values for a constant.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "HNamedConstantBuffer",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "The render context",
            "description": "The render context",
            "error": "",
            "examples": "",
            "members": [],
            "name": "HRenderContext",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Render dispatch function handle.",
            "description": "Render dispatch function handle.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "HRenderListDispatch",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Iterates over the constants",
            "description": "Iterates over the constants",
            "error": "",
            "examples": "",
            "members": [],
            "name": "IterateNamedConstants",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants buffer",
                    "name": "buffer",
                    "types": [
                        "dmRender::HNamedConstantBuffer"
                    ]
                },
                {
                    "doc": "the callback function void (<em>callback)(dmhash_t name_hash, void</em> ctx)",
                    "name": "callback",
                    "types": [
                        "void (*callback)(dmhash_t name_hash, void* ctx)"
                    ]
                },
                {
                    "doc": "the callback context",
                    "name": "ctx",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Creates a shader program constant",
            "description": "Creates a shader program constant",
            "error": "",
            "examples": "",
            "members": [],
            "name": "NewConstant",
            "notes": [],
            "parameters": [
                {
                    "doc": "the name of the material constant",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the constant",
                    "name": "constant",
                    "types": [
                        "dmRender::HConstant"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Allocates a named constant buffer",
            "description": "Allocates a named constant buffer",
            "error": "",
            "examples": "",
            "members": [],
            "name": "NewNamedConstantBuffer",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the constants buffer",
                    "name": "buffer",
                    "types": [
                        "dmRender::HNamedConstantBuffer"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Removes a named constant from the buffer",
            "description": "Removes a named constant from the buffer",
            "error": "",
            "examples": "",
            "members": [],
            "name": "RemoveNamedConstant",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants buffer",
                    "name": "buffer",
                    "types": [
                        "dmRender::HNamedConstantBuffer"
                    ]
                },
                {
                    "doc": "the name of the constant",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Allocates an array of render entries",
            "description": "Allocates an array of render entries",
            "error": "",
            "examples": "",
            "members": [],
            "name": "RenderListAlloc",
            "notes": [
                "Do not store a pointer into this array, as they're reused next frame"
            ],
            "parameters": [
                {
                    "doc": "the context",
                    "name": "context",
                    "types": [
                        "dmRender::HRenderContext"
                    ]
                },
                {
                    "doc": "the number of entries to allocate",
                    "name": "entries",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the render list entry array",
                    "name": "array",
                    "types": [
                        "dmRender::RenderListEntry*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Render dispatch function callback.",
            "description": "Render dispatch function callback.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "RenderListDispatchFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the params",
                    "name": "params",
                    "types": [
                        "dmRender::RenderListDispatchParams"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Render dispatch function callback.",
            "description": "Render dispatch function callback.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "RenderListDispatchFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the params",
                    "name": "params",
                    "types": [
                        "dmRender::RenderListDispatchParams"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Render dispatch function callback.",
            "description": "Render dispatch function callback.",
            "error": "",
            "examples": "",
            "members": [
                {
                    "doc": "the context",
                    "name": "m_Context",
                    "type": "dmRender::HRenderContext"
                },
                {
                    "doc": "the callback user data (registered with RenderListMakeDispatch())",
                    "name": "m_UserData",
                    "type": "void*"
                },
                {
                    "doc": "the operation",
                    "name": "m_Operation",
                    "type": "dmRender::RenderListOperation"
                },
                {
                    "doc": "the render entry array",
                    "name": "m_Buf",
                    "type": "dmRender::RenderListEntry"
                },
                {
                    "doc": "the start of the render batch. contains index into the m_Buf array",
                    "name": "m_Begin",
                    "type": "uint32_t*"
                },
                {
                    "doc": "the end of the render batch. Loop while \"m_Begin != m_End\"",
                    "name": "m_End",
                    "type": "uint32_t*"
                }
            ],
            "name": "RenderListDispatchParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Represents a renderable object (e.g. a single spri...",
            "description": "Represents a renderable object (e.g. a single sprite)\nThe renderer will (each frame) collect all entries with the current material tag, then batch these objects together.\nBatching is done based on the batch key and Z value (or order for GUI nodes)\nThe caller will also register a callback function where the batched entries will be returned.\nEach callback then represents a draw call, and will register a RenderObject",
            "error": "",
            "examples": "",
            "members": [],
            "name": "RenderListEntry",
            "notes": [],
            "parameters": [
                {
                    "doc": "the world position of the object",
                    "name": "m_WorldPosition",
                    "types": [
                        "dmVMath::Point3"
                    ]
                },
                {
                    "doc": "the order to sort on (used if m_MajorOrder != RENDER_ORDER_WORLD)",
                    "name": "m_Order",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "the batch key to sort on (note: only 48 bits are currently used by renderer)",
                    "name": "m_BatchKey",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "the key to the list of material tags",
                    "name": "m_TagListKey",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "user data (available in the render dispatch callback)",
                    "name": "m_UserData",
                    "types": [
                        "uint64_t"
                    ]
                },
                {
                    "doc": "used to sort within a batch",
                    "name": "m_MinorOrder",
                    "types": [
                        "uint32_t:4"
                    ]
                },
                {
                    "doc": "If RENDER_ORDER_WORLD, then sorting is done based on the world position.\nOtherwise the sorting uses the m_Order value directly.",
                    "name": "m_MajorOrder",
                    "types": [
                        "uint32_t:2"
                    ]
                },
                {
                    "doc": "The dispatch function callback (dmRender::HRenderListDispatch)",
                    "name": "m_Dispatch",
                    "types": [
                        "uint32_t:8"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Register a render dispatch function",
            "description": "Register a render dispatch function",
            "error": "",
            "examples": "",
            "members": [],
            "name": "RenderListMakeDispatch",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "name": "context",
                    "types": [
                        "dmRender::HRenderContext"
                    ]
                },
                {
                    "doc": "the render batch callback function",
                    "name": "dispatch_fn",
                    "types": [
                        "dmRender::RenderListDispatchFn"
                    ]
                },
                {
                    "doc": "the render list visibility callback function. May be 0",
                    "name": "visibility_fn",
                    "types": [
                        "dmRender::RenderListVisibilityFn"
                    ]
                },
                {
                    "doc": "userdata to the callback",
                    "name": "user_data",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the render dispatch function handle",
                    "name": "dispatch",
                    "types": [
                        "dmRender::HRenderListDispatch"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Render batch callback states",
            "description": "Render batch callback states",
            "error": "",
            "examples": "",
            "members": [
                {
                    "doc": "",
                    "name": "RENDER_LIST_OPERATION_BEGIN",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "RENDER_LIST_OPERATION_BATCH",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "RENDER_LIST_OPERATION_END",
                    "type": ""
                }
            ],
            "name": "RenderListOperation",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Adds a render object to the current render frame",
            "description": "Adds a render object to the current render frame",
            "error": "",
            "examples": "",
            "members": [],
            "name": "RenderListSubmit",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "name": "context",
                    "types": [
                        "dmRender::HRenderContext"
                    ]
                },
                {
                    "doc": "the start of the array",
                    "name": "begin",
                    "types": [
                        "dmRender::RenderListEntry*"
                    ]
                },
                {
                    "doc": "the end of the array (i.e. \"while begin!=end: *begin ...\"\")",
                    "name": "end",
                    "types": [
                        "dmRender::RenderListEntry*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Visibility dispatch function callback.",
            "description": "Visibility dispatch function callback.",
            "error": "",
            "examples": "",
            "members": [
                {
                    "doc": "the callback user data (registered with RenderListMakeDispatch())",
                    "name": "m_UserData",
                    "type": "void*"
                },
                {
                    "doc": "the render entry array",
                    "name": "m_Entries",
                    "type": "dmRender::RenderListEntry"
                },
                {
                    "doc": "the number of render entries in the array",
                    "name": "m_NumEntries",
                    "type": "uint32_t"
                }
            ],
            "name": "RenderListVisibilityParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Render objects represent an actual draw call",
            "description": "Render objects represent an actual draw call",
            "error": "",
            "examples": "",
            "members": [
                {
                    "doc": "] the shader constants",
                    "name": "m_Constants",
                    "type": "dmRender::HConstant["
                },
                {
                    "doc": "the world transform (usually identity for batched objects)",
                    "name": "m_WorldTransform",
                    "type": "dmVMath::Matrix4"
                },
                {
                    "doc": "the texture transform",
                    "name": "m_TextureTransform",
                    "type": "dmVMath::Matrix4"
                },
                {
                    "doc": "the vertex buffer",
                    "name": "m_VertexBuffer",
                    "type": "dmGraphics::HVertexBuffer"
                },
                {
                    "doc": "the vertex declaration",
                    "name": "m_VertexDeclaration",
                    "type": "dmGraphics::HVertexDeclaration"
                },
                {
                    "doc": "the index buffer",
                    "name": "m_IndexBuffer",
                    "type": "dmGraphics::HIndexBuffer"
                },
                {
                    "doc": "the material",
                    "name": "m_Material",
                    "type": "dmRender::HMaterial"
                },
                {
                    "doc": "] the textures",
                    "name": "m_Textures",
                    "type": "dmGraphics::HTexture["
                },
                {
                    "doc": "the primitive type",
                    "name": "m_PrimitiveType",
                    "type": "dmGraphics::PrimitiveType"
                },
                {
                    "doc": "the index type (16/32 bit)",
                    "name": "m_IndexType",
                    "type": "dmGraphics::Type"
                },
                {
                    "doc": "the source blend factor",
                    "name": "m_SourceBlendFactor",
                    "type": "dmGraphics::BlendFactor"
                },
                {
                    "doc": "the destination blend factor",
                    "name": "m_DestinationBlendFactor",
                    "type": "dmGraphics::BlendFactor"
                },
                {
                    "doc": "the stencil test params",
                    "name": "m_StencilTestParams",
                    "type": "dmRender::StencilTestParams"
                },
                {
                    "doc": "the vertex start",
                    "name": "m_VertexStart",
                    "type": "uint32_t"
                },
                {
                    "doc": "the vertex count",
                    "name": "m_VertexCount",
                    "type": "uint32_t"
                },
                {
                    "doc": "use the blend factors",
                    "name": "m_SetBlendFactors",
                    "type": "uint8_t:1"
                },
                {
                    "doc": "use the stencil test",
                    "name": "m_SetStencilTest",
                    "type": "uint8_t:1"
                }
            ],
            "name": "RenderObject",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Render order",
            "description": "Render order",
            "error": "",
            "examples": "",
            "members": [
                {
                    "doc": "<div class=\"codehilite\"><pre><span></span><code>      Used by game objects\n</code></pre></div>",
                    "name": "RENDER_ORDER_WORLD",
                    "type": ""
                },
                {
                    "doc": "<div class=\"codehilite\"><pre><span></span><code>Used by gui\n</code></pre></div>",
                    "name": "RENDER_ORDER_AFTER_WORLD",
                    "type": ""
                }
            ],
            "name": "RenderOrder",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "members": [
                {
                    "doc": "",
                    "name": "RESULT_OK",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "RESULT_INVALID_CONTEXT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "RESULT_OUT_OF_RESOURCES",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "RESULT_BUFFER_IS_FULL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "RESULT_INVALID_PARAMETER",
                    "type": ""
                }
            ],
            "name": "Result",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Sets the shader program constant location",
            "description": "Sets the shader program constant location",
            "error": "",
            "examples": "",
            "members": [],
            "name": "SetConstantLocation",
            "notes": [],
            "parameters": [
                {
                    "doc": "The shader constant",
                    "name": "constant",
                    "types": [
                        "dmRender::HConstant"
                    ]
                },
                {
                    "doc": "the location",
                    "name": "location",
                    "types": [
                        "dmGraphics::HUniformLocation"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Sets the type of the constant",
            "description": "Sets the type of the constant",
            "error": "",
            "examples": "",
            "members": [],
            "name": "SetConstantType",
            "notes": [],
            "parameters": [
                {
                    "doc": "The shader constant",
                    "name": "constant",
                    "types": [
                        "dmRender::HConstant"
                    ]
                },
                {
                    "doc": "the type of the constant",
                    "name": "type",
                    "types": [
                        "dmRenderDDF::MaterialDesc::ConstantType"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Sets the shader program constant values",
            "description": "Sets the shader program constant values",
            "error": "",
            "examples": "",
            "members": [],
            "name": "SetConstantValues",
            "notes": [],
            "parameters": [
                {
                    "doc": "The shader constant",
                    "name": "constant",
                    "types": [
                        "dmRender::HConstant"
                    ]
                },
                {
                    "doc": "the array values",
                    "name": "values",
                    "types": [
                        "dmVMath::Vector4*"
                    ]
                },
                {
                    "doc": "the array size (number of Vector4's)",
                    "name": "num_values",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result",
                    "name": "result",
                    "types": [
                        "dmRender::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Sets one or more named constants to the buffer",
            "description": "Sets one or more named constants to the buffer",
            "error": "",
            "examples": "",
            "members": [],
            "name": "SetNamedConstant",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants buffer",
                    "name": "buffer",
                    "types": [
                        "dmRender::HNamedConstantBuffer"
                    ]
                },
                {
                    "doc": "the name of the constant",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "the values",
                    "name": "values",
                    "types": [
                        "dmVMath::Vector4*"
                    ]
                },
                {
                    "doc": "the number of values",
                    "name": "num_values",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Sets one or more named constants to the buffer wit...",
            "description": "Sets one or more named constants to the buffer with a specified data type.\nCurrently only dmRenderDDF::MaterialDesc::CONSTANT_TYPE_USER and dmRenderDDF::MaterialDesc::CONSTANT_TYPE_USER_MATRIX4\nare supported.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "SetNamedConstant",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants buffer",
                    "name": "buffer",
                    "types": [
                        "dmRender::HNamedConstantBuffer"
                    ]
                },
                {
                    "doc": "the name of the constant",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "the values",
                    "name": "values",
                    "types": [
                        "dmVMath::Vector4*"
                    ]
                },
                {
                    "doc": "the number of values",
                    "name": "num_values",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The constant type",
                    "name": "constant_type",
                    "types": [
                        "dmRenderDDF::MaterialDesc::ConstantType"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Sets a named constant in the buffer at a specific ...",
            "description": "Sets a named constant in the buffer at a specific index",
            "error": "",
            "examples": "",
            "members": [],
            "name": "SetNamedConstantAtIndex",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants buffer",
                    "name": "buffer",
                    "types": [
                        "dmRender::HNamedConstantBuffer"
                    ]
                },
                {
                    "doc": "the name of the constant",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "the value",
                    "name": "value",
                    "types": [
                        "dmVMath::Vector4"
                    ]
                },
                {
                    "doc": "the index of the value to set",
                    "name": "value_index",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result",
                    "name": "result",
                    "types": [
                        "Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Sets a list of named constants to the buffer",
            "description": "Sets a list of named constants to the buffer",
            "error": "",
            "examples": "",
            "members": [],
            "name": "SetNamedConstants",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants buffer",
                    "name": "buffer",
                    "types": [
                        "dmRender::HNamedConstantBuffer"
                    ]
                },
                {
                    "doc": "the constants",
                    "name": "constants",
                    "types": [
                        "dmRender::HConstant*"
                    ]
                },
                {
                    "doc": "the number of constants",
                    "name": "num_constants",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Struct holding stencil operation setup",
            "description": "Struct holding stencil operation setup",
            "error": "",
            "examples": "",
            "members": [
                {
                    "doc": "the compare function",
                    "name": "m_Func",
                    "type": "dmGraphics::CompareFunc"
                },
                {
                    "doc": "the stencil fail operation",
                    "name": "m_OpSFail",
                    "type": "dmGraphics::StencilOp"
                },
                {
                    "doc": "the depth pass fail operation",
                    "name": "m_OpDPFail",
                    "type": "dmGraphics::StencilOp"
                },
                {
                    "doc": "the depth pass pass operation",
                    "name": "m_OpDPPass",
                    "type": "dmGraphics::StencilOp"
                },
                {
                    "doc": "",
                    "name": "m_Ref",
                    "type": "uint8_t"
                },
                {
                    "doc": "",
                    "name": "m_RefMask",
                    "type": "uint8_t"
                },
                {
                    "doc": "",
                    "name": "m_BufferMask",
                    "type": "uint8_t"
                },
                {
                    "doc": "",
                    "name": "m_ColorBufferMask",
                    "type": "uint8_t:4"
                },
                {
                    "doc": "",
                    "name": "m_ClearBuffer",
                    "type": "uint8_t:1"
                }
            ],
            "name": "StencilTestParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Visibility status",
            "description": "Visibility status",
            "error": "",
            "examples": "",
            "members": [
                {
                    "doc": "",
                    "name": "VISIBILITY_NONE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "VISIBILITY_FULL",
                    "type": ""
                }
            ],
            "name": "Visibility",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        }
    ],
    "info": {
        "brief": "Render API documentation",
        "description": "<span class=\"file\"><dmsdk/render/render.h></span>\nApi for render specific data",
        "file": "",
        "name": "Render",
        "namespace": "dmRender",
        "notes": [],
        "path": ""
    }
}