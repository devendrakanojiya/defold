{
    "elements": [
        {
            "brief": "Adds a file to the resource system\nAny request for...",
            "description": "Adds a file to the resource system\nAny request for this path will go through any existing mounts first.\nIf you wish to provide file overrides, please use the LiveUpdate feature for that.\nThe file isn't persisted between sessions.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "AddFile",
            "notes": [],
            "parameters": [
                {
                    "doc": "Factory handle",
                    "name": "factory",
                    "types": [
                        "dmResource::HFactory"
                    ]
                },
                {
                    "doc": "The path of the resource",
                    "name": "path",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "The size of the resource (in bytes)",
                    "name": "size",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The resource payload",
                    "name": "resource",
                    "types": [
                        "const void*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "on success.",
                    "name": "RESULT_OK",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "declare a new extension",
            "description": "Declare and register new extension to the engine.\nThis macro is used to declare the extension callback functions used by the engine to communicate with the extension.",
            "error": "",
            "examples": "Register a new type:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">dmResource</span><span class=\"o\">::</span><span class=\"n\">Result</span><span class=\"w\"> </span><span class=\"nf\">ResourceTypeScriptCreate</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">dmResource</span><span class=\"o\">::</span><span class=\"n\">Result</span><span class=\"w\"> </span><span class=\"nf\">ResourceTypeScriptDestroy</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">dmResource</span><span class=\"o\">::</span><span class=\"n\">Result</span><span class=\"w\"> </span><span class=\"nf\">ResourceTypeScriptRecreate</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">BlobContext</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">dmResource</span><span class=\"o\">::</span><span class=\"n\">Result</span><span class=\"w\"> </span><span class=\"nf\">RegisterResourceTypeBlob</span><span class=\"p\">(</span><span class=\"n\">ResourceTypeRegisterContext</span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// The engine.cpp creates the contexts for our built in types.</span>\n<span class=\"w\">    </span><span class=\"c1\">// Here we register a custom type</span>\n<span class=\"w\">    </span><span class=\"n\">BlobContext</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">BlobContext</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_Contexts</span><span class=\"p\">.</span><span class=\"n\">Put</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_NameHash</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">context</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">dmResource</span><span class=\"o\">::</span><span class=\"n\">RegisterType</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_Factory</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                       </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_Name</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                       </span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                       </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                       </span><span class=\"n\">ResourceTypeScriptCreate</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                       </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                       </span><span class=\"n\">ResourceTypeScriptDestroy</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                       </span><span class=\"n\">ResourceTypeScriptRecreate</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">dmResource</span><span class=\"o\">::</span><span class=\"n\">Result</span><span class=\"w\"> </span><span class=\"nf\">DeregisterResourceTypeScript</span><span class=\"p\">(</span><span class=\"n\">ResourceTypeRegisterContext</span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">BlobContext</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">BlobContext</span><span class=\"o\">**</span><span class=\"p\">)</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_Contexts</span><span class=\"p\">.</span><span class=\"n\">Get</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_NameHash</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">delete</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">context</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"n\">DM_DECLARE_RESOURCE_TYPE</span><span class=\"p\">(</span><span class=\"n\">ResourceTypeBlob</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;blobc&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RegisterResourceTypeBlob</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DeregisterResourceTypeScript</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "members": [],
            "name": "DM_DECLARE_RESOURCE_TYPE",
            "notes": [],
            "parameters": [
                {
                    "doc": "external extension symbol description (no quotes).",
                    "name": "symbol",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The file resource suffix, without a \".\".",
                    "name": "suffix",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "type register function\n<dl>\n<dt><code>ctx</code></dt>\n<dd><span class=\"type\">dmResource::ResourceTypeRegisterContext&amp;</span> Reference to an <code>ResourceTypeRegisterContext</code> structure.</dd>\n</dl>",
                    "name": "register_fn",
                    "types": [
                        "function(dmResource::ResourceTypeRegisterContext& ctx)"
                    ]
                },
                {
                    "doc": "type deregister function. May be null.\n<dl>\n<dt><code>ctx</code></dt>\n<dd><span class=\"type\">dmResource::ResourceTypeRegisterContext&amp;</span> Reference to an <code>ResourceTypeRegisterContext</code> structure.</dd>\n</dl>",
                    "name": "deregister_fn",
                    "types": [
                        "function(dmResource::ResourceTypeRegisterContext& ctx)"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "Returns the canonical path hash of a resource",
            "description": "Returns the canonical path hash of a resource",
            "error": "",
            "examples": "",
            "members": [],
            "name": "FDecryptResource",
            "notes": [],
            "parameters": [
                {
                    "doc": "The input/output buffer",
                    "name": "buffer",
                    "types": [
                        "void*"
                    ]
                },
                {
                    "doc": "The size of the buffer (in bytes)",
                    "name": "buffer_len",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "on success",
                    "name": "RESULT_OK",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Get a resource from factory",
            "description": "Get a resource from factory",
            "error": "",
            "examples": "",
            "members": [],
            "name": "Get",
            "notes": [],
            "parameters": [
                {
                    "doc": "Factory handle",
                    "name": "factory",
                    "types": [
                        "dmResource::HFactory"
                    ]
                },
                {
                    "doc": "Resource name",
                    "name": "name",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "Created resource",
                    "name": "resource",
                    "types": [
                        "void**"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK on success",
                    "name": "result",
                    "types": [
                        "dmResource::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get a resource from factory",
            "description": "Get a resource from factory",
            "error": "",
            "examples": "",
            "members": [],
            "name": "Get",
            "notes": [],
            "parameters": [
                {
                    "doc": "Factory handle",
                    "name": "factory",
                    "types": [
                        "dmResource::HFactory"
                    ]
                },
                {
                    "doc": "Resource name",
                    "name": "name",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "Created resource",
                    "name": "resource",
                    "types": [
                        "void**"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK on success",
                    "name": "result",
                    "types": [
                        "dmResource::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Hint the preloader what to load before Create is c...",
            "description": "Hint the preloader what to load before Create is called on the resource.\nThe resources are not guaranteed to be loaded before Create is called.\nThis function can be called from a worker thread.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "PreloadHint",
            "notes": [],
            "parameters": [
                {
                    "doc": "Preloader handle",
                    "name": "factory",
                    "types": [
                        "dmResource::HPreloadHintInfo"
                    ]
                },
                {
                    "doc": "Resource name",
                    "name": "name",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "if successfully invoking preloader.",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Registers a custom resource decryption function",
            "description": "Registers a custom resource decryption function",
            "error": "",
            "examples": "",
            "members": [],
            "name": "RegisterResourceDecryptionFunction",
            "notes": [],
            "parameters": [
                {
                    "doc": "The decryption function",
                    "name": "decrypt_resource",
                    "types": [
                        "dmResource::FDecryptResource"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Release resource",
            "description": "Release resource",
            "error": "",
            "examples": "",
            "members": [],
            "name": "Release",
            "notes": [],
            "parameters": [
                {
                    "doc": "Factory handle",
                    "name": "factory",
                    "types": [
                        "dmResource::HFactory"
                    ]
                },
                {
                    "doc": "Resource pointer",
                    "name": "resource",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Removes a previously registered file from the reso...",
            "description": "Removes a previously registered file from the resource system",
            "error": "",
            "examples": "",
            "members": [],
            "name": "RemoveFile",
            "notes": [],
            "parameters": [
                {
                    "doc": "Factory handle",
                    "name": "factory",
                    "types": [
                        "dmResource::HFactory"
                    ]
                },
                {
                    "doc": "The path of the resource",
                    "name": "path",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "on success.",
                    "name": "RESULT_OK",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Resource descriptor",
            "description": "Resource descriptor",
            "error": "",
            "examples": "",
            "members": [
                {
                    "doc": "Hash of resource name",
                    "name": "m_NameHash",
                    "type": "uint64_t"
                },
                {
                    "doc": "Resource pointer. Must be unique and not NULL.",
                    "name": "m_Resource",
                    "type": "void*"
                },
                {
                    "doc": "Resource pointer. Resource pointer to a previous version of the resource, iff it exists. Only used when recreating resources.",
                    "name": "m_PrevResource",
                    "type": "void*"
                },
                {
                    "doc": "Resource size in memory. I.e. the payload of m_Resource",
                    "name": "m_ResourceSize",
                    "type": "uint32_t"
                }
            ],
            "name": "SResourceDescriptor",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Resource",
        "description": "Functions for managing resource types.",
        "file": "dmsdk/resource/resource.h",
        "group": "DEFOLD SDK",
        "name": "Resource",
        "namespace": "dmResource",
        "notes": [],
        "path": "engine/resource/src/dmsdk/resource/resource.h"
    }
}