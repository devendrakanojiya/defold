{
    "elements": [
        {
            "brief": "parse the headers",
            "description": "Parse the header data and make callbacks for each header/version entry and the start of the body.",
            "error": "",
            "examples": "",
            "members": [],
            "name": "ParseHeader",
            "notes": [
                "This function is destructive to the input data."
            ],
            "parameters": [
                {
                    "doc": "http response headers. Must be a null terminated string.",
                    "name": "header_str",
                    "types": [
                        "char*"
                    ]
                },
                {
                    "doc": "user data to the callbacks.",
                    "name": "user_data",
                    "types": [
                        "const void*"
                    ]
                },
                {
                    "doc": "true if there is no more data",
                    "name": "end_of_receive",
                    "types": [
                        "bool"
                    ]
                },
                {
                    "doc": "callback for the http version\n    void (<em>version_cbk)(void</em> user_data, int major, int minor, int status, const char* status_str);",
                    "name": "version_cbk",
                    "types": [
                        "function"
                    ]
                },
                {
                    "doc": "callback for each header/value pair\n    void (<em>header_cbk)(void</em> user_data, const char<em> key, const char</em> value);",
                    "name": "header_cbk",
                    "types": [
                        "function"
                    ]
                },
                {
                    "doc": "callback to note the start offset of the body data.\n    void (<em>body_cbk)(void</em> user_data, int offset)",
                    "name": "body_cbk",
                    "types": [
                        "function"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the parse result",
                    "name": "result",
                    "types": [
                        "dmHttpClient::ParseResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "header parse result enumeration",
            "description": "Header parse result enumeration.",
            "error": "",
            "examples": "",
            "members": [
                {
                    "doc": "= 1",
                    "name": "dmHttpClient::PARSE_RESULT_NEED_MORE_DATA",
                    "type": ""
                },
                {
                    "doc": "= 0",
                    "name": "dmHttpClient::PARSE_RESULT_OK",
                    "type": ""
                },
                {
                    "doc": "= -1",
                    "name": "dmHttpClient::PARSE_RESULT_SYNTAX_ERROR",
                    "type": ""
                }
            ],
            "name": "ParseResult",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        }
    ],
    "info": {
        "brief": "SDK Http Client API documentation",
        "description": "Http client functions.",
        "file": "dmsdk/dlib/hash.h",
        "group": "DEFOLD SDK",
        "name": "Http Client",
        "namespace": "dmHttpClient",
        "notes": [],
        "path": "engine/dlib/src/dmsdk/dlib/hash.h"
    }
}