{
    "elements": [
        {
            "brief": "makes the receiving camera become the active camera",
            "description": "Post this message to a camera-component to activate it.\nSeveral cameras can be active at the same time, but only the camera that was last activated will be used for rendering.\nWhen the camera is deactivated (see <code>release_camera_focus</code>), the previously activated camera will again be used for rendering automatically.\nThe reason it is called \"camera focus\" is the similarity to how acquiring input focus works (see <code>acquire_input_focus</code>).",
            "error": "",
            "examples": "In the examples, it is assumed that the instance of the script has a camera-component with id \"camera\".\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;acquire_camera_focus&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
            "members": [],
            "name": "acquire_camera_focus",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MESSAGE"
        },
        {
            "brief": "<span class=\"type\">float</span> camera aspect ratio",
            "description": "The ratio between the frustum width and height. Used when calculating the\nprojection of a perspective camera.\nThe type of the property is number.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">aspect_ratio</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;aspect_ratio&quot;</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;aspect_ratio&quot;</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "members": [],
            "name": "aspect_ratio",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        },
        {
            "brief": "makes camera active",
            "description": "makes camera active",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">camera</span><span class=\"p\">.</span><span class=\"n\">acquire_focus</span><span class=\"p\">(</span><span class=\"s2\">&quot;/observer#main_camera&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
            "members": [],
            "name": "camera.acquire_focus",
            "notes": [],
            "parameters": [
                {
                    "doc": "url of camera component",
                    "name": "url",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "deactivate camera",
            "description": "deactivate camera",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">camera</span><span class=\"p\">.</span><span class=\"n\">release_focus</span><span class=\"p\">(</span><span class=\"s2\">&quot;/observer#main_camera&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
            "members": [],
            "name": "camera.release_focus",
            "notes": [],
            "parameters": [
                {
                    "doc": "url of camera component",
                    "name": "url",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "<span class=\"type\">float</span> camera far_z",
            "description": "Camera frustum far plane.\nThe type of the property is float.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">far_z</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;far_z&quot;</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;far_z&quot;</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "members": [],
            "name": "far_z",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        },
        {
            "brief": "<span class=\"type\">float</span> camera fov",
            "description": "Vertical field of view of the camera.\nThe type of the property is float.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">fov</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;fov&quot;</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;fov&quot;</span><span class=\"p\">,</span> <span class=\"n\">fov</span> <span class=\"o\">+</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;fov&quot;</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_ONCE_PINGPONG</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">EASING_LINEAR</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "members": [],
            "name": "fov",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        },
        {
            "brief": "<span class=\"type\">float</span> camera near_z",
            "description": "Camera frustum near plane.\nThe type of the property is float.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">near_z</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;near_z&quot;</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;near_z&quot;</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "members": [],
            "name": "near_z",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        },
        {
            "brief": "<span class=\"type\">float</span> camera orthographic_zoom",
            "description": "Zoom level when using an orthographic projection.\nThe type of the property is float.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">orthographic_zoom</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;orthographic_zoom&quot;</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;orthographic_zoom&quot;</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;orthographic_zoom&quot;</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_ONCE_PINGPONG</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">EASING_INOUTQUAD</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "members": [],
            "name": "orthographic_zoom",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        },
        {
            "brief": "<span class=\"type\">float</span> camera projection",
            "description": "<span class=\"mark\">READ ONLY</span> The calculated projection matrix of the camera.\nThe type of the property is matrix4.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">projection</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;projection&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "members": [],
            "name": "projection",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        },
        {
            "brief": "deactivates the receiving camera",
            "description": "\nPost this message to a camera-component to deactivate it. The camera is then removed from the active cameras.\nSee <code>acquire_camera_focus</code> for more information how the active cameras are used in rendering.\n",
            "error": "",
            "examples": "In the examples, it is assumed that the instance of the script has a camera-component with id \"camera\".\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;release_camera_focus&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
            "members": [],
            "name": "release_camera_focus",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MESSAGE"
        },
        {
            "brief": "sets camera properties",
            "description": "\nPost this message to a camera-component to set its properties at run-time.\n",
            "error": "",
            "examples": "In the examples, it is assumed that the instance of the script has a camera-component with id \"camera\".\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;set_camera&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">aspect_ratio</span> <span class=\"o\">=</span> <span class=\"mi\">16</span><span class=\"o\">/</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">fov</span> <span class=\"o\">=</span> <span class=\"nb\">math.pi</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">near_z</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">far_z</span> <span class=\"o\">=</span> <span class=\"mi\">500</span><span class=\"p\">})</span>\n</code></pre></div>",
            "members": [],
            "name": "set_camera",
            "notes": [],
            "parameters": [
                {
                    "doc": "aspect ratio of the screen (width divided by height)",
                    "name": "aspect_ratio",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "field of view of the lens, measured as the angle in radians between the right and left edge",
                    "name": "fov",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "position of the near clipping plane (distance from camera along relative z)",
                    "name": "near_z",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "position of the far clipping plane (distance from camera along relative z)",
                    "name": "far_z",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "set to use an orthographic projection",
                    "name": "orthographic_projection",
                    "types": [
                        "bool"
                    ]
                },
                {
                    "doc": "zoom level when the camera is using an orthographic projection",
                    "name": "orthographic_zoom",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MESSAGE"
        },
        {
            "brief": "<span class=\"type\">float</span> camera view",
            "description": "<span class=\"mark\">READ ONLY</span> The calculated view matrix of the camera.\nThe type of the property is matrix4.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#camera&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;view&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "members": [],
            "name": "view",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        }
    ],
    "info": {
        "brief": "Camera API documentation",
        "description": "Messages to control camera components and camera focus.",
        "file": "",
        "group": "COMPONENTS",
        "name": "Camera",
        "namespace": "camera",
        "notes": [],
        "path": ""
    }
}